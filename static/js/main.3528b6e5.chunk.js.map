{"version":3,"sources":["constant.js","CarouselApp.js","App.js","serviceWorker.js","index.js"],"names":["IMG_LIST","CarouselApp","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","ls","inherits","createClass","key","value","x","b","_this2","react_default","a","createElement","mdbreact_esm","activeItem","showControls","showIndicators","className","_","map","k","i","itemId","isVertical","src","alt","Component","App","CarouselApp_CarouselApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAAaA,EAAW,CACtB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MCC3CC,SAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEEQ,GAAKnB,EAFPI,EAAA,OAAAC,OAAAe,EAAA,EAAAf,CAAAJ,EAAAC,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAA,EAAAqB,IAAA,aAAAC,MAAA,SAIaC,GACT,IAAIC,GAAI,EAKR,OAJU,OAAND,GAAoB,OAANA,GAAoB,OAANA,IAC9BC,GAAI,GAGCA,IAVX,CAAAH,IAAA,SAAAC,MAAA,WAaW,IAAAG,EAAAnB,KACP,OACEoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaC,WAAY,EAAGrB,OAAQH,KAAKY,GAAGT,OAAQsB,cAAc,EAAMC,gBAAgB,EAAMC,UAAU,aACtGP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEIK,IAAEC,IAAI7B,KAAKY,GAAI,SAACkB,EAAGC,GACjB,OACEX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBS,OAAQD,EAAI,GAC3BX,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGJ,EAAKc,WAAWH,IACfV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBAAgBO,IAAG,eAAAvB,OAAiBmB,EAAjB,QAA0BK,IAAG,UAAAxB,OAAYoB,EAAI,MAE/EZ,EAAKc,WAAWH,IAChBV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBAAgBO,IAAG,eAAAvB,OAAiBmB,EAAjB,QAA0BK,IAAG,UAAAxB,OAAYoB,EAAI,gBA3BvGrC,EAAA,CAAiC0C,cCqBlBC,MAtBf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3528b6e5.chunk.js","sourcesContent":["export const IMG_LIST = [\r\n  2302, 2313, 2320, 2323, 2335, 2339, 2348, 2353, 2357, 2369,\r\n  2379, 2383, 2387, 2394, 2396, 2414, 2416, 2430, 2436, 2455,\r\n  2301, 2312, 2314, 2316, 2319, 2324, 2331, 2337, 2343, 2356,\r\n  2359, 2367, 2374, 2378, 2382, 2395, 2402, 2403, 2408, 2410,\r\n  2413, 2417, 2420, 2427, 2428, 2438, 2441, 2454, 2457, 2458\r\n];","import React, { Component } from 'react';\r\nimport { MDBCarousel, MDBCarouselCaption, MDBCarouselInner, MDBCarouselItem, MDBView, MDBMask, MDBContainer } from 'mdbreact';\r\nimport _ from 'lodash';\r\nimport { IMG_LIST } from './constant';\r\nimport './CarouselApp.css';\r\n\r\nexport class CarouselApp extends Component {\r\n\r\n  ls = IMG_LIST;\r\n\r\n  isVertical(x) {\r\n    let b = false;\r\n    if (x === 2313 || x === 2353 || x === 2455) {\r\n      b = true;\r\n    }\r\n\r\n    return b;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBCarousel activeItem={1} length={this.ls.length} showControls={true} showIndicators={true} className=\"z-depth-1\">\r\n          <MDBCarouselInner>\r\n            {\r\n              _.map(this.ls, (k, i) => {\r\n                return (\r\n                  <MDBCarouselItem itemId={i + 1}>\r\n                    <MDBView>\r\n                      {this.isVertical(k) && (\r\n                        <img className=\"d-block w-100\" src={`./photo/MC3_${k}.jpg`} alt={`Slide #${i + 1}`} />\r\n                      )}\r\n                      {!this.isVertical(k) && (\r\n                        <img className=\"d-block w-100\" src={`./photo/MC3_${k}.jpg`} alt={`Slide #${i + 1}`} />\r\n                      )}\r\n                    </MDBView>\r\n                  </MDBCarouselItem>\r\n                )\r\n              })\r\n            }\r\n          </MDBCarouselInner>\r\n        </MDBCarousel>\r\n      </MDBContainer>\r\n    )\r\n  }\r\n}","import React from 'react';\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\nimport { CarouselApp } from './CarouselApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <CarouselApp />\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}